2018-06-09 00:21:02,596 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:21:02,617 [main] INFO t3.t3App - File Found : true
2018-06-09 00:21:02,638 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setIdCampo( r.getInteger("ID_CAMPO") );

    albums.setDsCampo( r.getString("DS_CAMPO") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ID_CAMPO,DS_CAMPO)"
        + "VALUES (?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getIdCampo();
      
      preparedStatement.setString(1, albums.getDsCampo();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ID_CAMPO = ?, DS_CAMPO = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getIdCampo();
      
      preparedStatement.setString(1, albums.getDsCampo();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(2, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:21:02,640 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:21:02,640 [main] INFO t3.t3App - File Found : true
2018-06-09 00:21:02,643 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer idCampo;

  private String dsCampo;


<<* --- getters --- *>>

  public Integer getIdCampo();
  {
    return idCampo;
  }

  public String getDsCampo();
  {
    return dsCampo;
  }


<<* --- setters --- *>>

  public void setIdCampo(Integer idCampo);
  {
    this.idCampo = idCampo;
  }

  public void setDsCampo(String dsCampo);
  {
    this.dsCampo = dsCampo;
  }

}
2018-06-09 00:25:06,428 [main] ERROR t3.t3App - java.sql.SQLException: no such column: 'COLUM_NAME'
2018-06-09 00:25:53,477 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:25:53,480 [main] INFO t3.t3App - File Found : true
2018-06-09 00:25:53,496 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.get4("ArtistId") );

    albums.setAlbumid( r.get4("AlbumId") );

    albums.setTitle( r.get12("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.set4(0, albums.getArtistid();
      
      preparedStatement.set4(1, albums.getAlbumid();
      
      preparedStatement.set12(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.set4(0, albums.getArtistid();
      
      preparedStatement.set4(1, albums.getAlbumid();
      
      preparedStatement.set12(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:25:53,497 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:25:53,497 [main] INFO t3.t3App - File Found : true
2018-06-09 00:25:53,500 [main] INFO t3.t3App - package domain;

public class Albums
{

  private 4 artistid;

  private 4 albumid;

  private 12 title;


<<* --- getters --- *>>

  public 4 getArtistid();
  {
    return artistid;
  }

  public 4 getAlbumid();
  {
    return albumid;
  }

  public 12 getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(4 artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(4 albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(12 title);
  {
    this.title = title;
  }

}
2018-06-09 00:25:56,416 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:25:56,416 [main] INFO t3.t3App - File Found : true
2018-06-09 00:25:56,418 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.get4("ArtistId") );

    albums.setAlbumid( r.get4("AlbumId") );

    albums.setTitle( r.get12("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.set4(0, albums.getArtistid();
      
      preparedStatement.set4(1, albums.getAlbumid();
      
      preparedStatement.set12(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.set4(0, albums.getArtistid();
      
      preparedStatement.set4(1, albums.getAlbumid();
      
      preparedStatement.set12(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:25:56,419 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:25:56,419 [main] INFO t3.t3App - File Found : true
2018-06-09 00:25:56,421 [main] INFO t3.t3App - package domain;

public class Albums
{

  private 4 artistid;

  private 4 albumid;

  private 12 title;


<<* --- getters --- *>>

  public 4 getArtistid();
  {
    return artistid;
  }

  public 4 getAlbumid();
  {
    return albumid;
  }

  public 12 getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(4 artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(4 albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(12 title);
  {
    this.title = title;
  }

}
2018-06-09 00:28:46,638 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:28:46,642 [main] INFO t3.t3App - File Found : true
2018-06-09 00:28:46,660 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getINTEGER("ArtistId") );

    albums.setAlbumid( r.getINTEGER("AlbumId") );

    albums.setTitle( r.getNVARCHAR(160)("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setINTEGER(0, albums.getArtistid();
      
      preparedStatement.setINTEGER(1, albums.getAlbumid();
      
      preparedStatement.setNVARCHAR(160)(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setINTEGER(0, albums.getArtistid();
      
      preparedStatement.setINTEGER(1, albums.getAlbumid();
      
      preparedStatement.setNVARCHAR(160)(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:28:46,661 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:28:46,661 [main] INFO t3.t3App - File Found : true
2018-06-09 00:28:46,664 [main] INFO t3.t3App - package domain;

public class Albums
{

  private INTEGER artistid;

  private INTEGER albumid;

  private NVARCHAR(160) title;


<<* --- getters --- *>>

  public INTEGER getArtistid();
  {
    return artistid;
  }

  public INTEGER getAlbumid();
  {
    return albumid;
  }

  public NVARCHAR(160) getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(INTEGER artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(INTEGER albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(NVARCHAR(160) title);
  {
    this.title = title;
  }

}
2018-06-09 00:29:53,416 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:29:53,416 [main] INFO t3.t3App - File Found : true
2018-06-09 00:29:53,419 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getINTEGER("ArtistId") );

    albums.setAlbumid( r.getINTEGER("AlbumId") );

    albums.setTitle( r.getNVARCHAR(160)("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setINTEGER(0, albums.getArtistid();
      
      preparedStatement.setINTEGER(1, albums.getAlbumid();
      
      preparedStatement.setNVARCHAR(160)(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setINTEGER(0, albums.getArtistid();
      
      preparedStatement.setINTEGER(1, albums.getAlbumid();
      
      preparedStatement.setNVARCHAR(160)(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:29:53,420 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:29:53,420 [main] INFO t3.t3App - File Found : true
2018-06-09 00:29:53,422 [main] INFO t3.t3App - package domain;

public class Albums
{

  private INTEGER artistid;

  private INTEGER albumid;

  private NVARCHAR(160) title;


<<* --- getters --- *>>

  public INTEGER getArtistid();
  {
    return artistid;
  }

  public INTEGER getAlbumid();
  {
    return albumid;
  }

  public NVARCHAR(160) getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(INTEGER artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(INTEGER albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(NVARCHAR(160) title);
  {
    this.title = title;
  }

}
2018-06-09 00:31:00,967 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:31:00,967 [main] INFO t3.t3App - File Found : true
2018-06-09 00:31:00,970 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getINTEGER("ArtistId") );

    albums.setAlbumid( r.getINTEGER("AlbumId") );

    albums.setTitle( r.getNVARCHAR(160)("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setINTEGER(0, albums.getArtistid();
      
      preparedStatement.setINTEGER(1, albums.getAlbumid();
      
      preparedStatement.setNVARCHAR(160)(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setINTEGER(0, albums.getArtistid();
      
      preparedStatement.setINTEGER(1, albums.getAlbumid();
      
      preparedStatement.setNVARCHAR(160)(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:31:00,970 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:31:00,971 [main] INFO t3.t3App - File Found : true
2018-06-09 00:31:00,972 [main] INFO t3.t3App - package domain;

public class Albums
{

  private INTEGER artistid;

  private INTEGER albumid;

  private NVARCHAR(160) title;


<<* --- getters --- *>>

  public INTEGER getArtistid();
  {
    return artistid;
  }

  public INTEGER getAlbumid();
  {
    return albumid;
  }

  public NVARCHAR(160) getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(INTEGER artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(INTEGER albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(NVARCHAR(160) title);
  {
    this.title = title;
  }

}
2018-06-09 00:46:40,613 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:46:40,616 [main] INFO t3.t3App - File Found : true
2018-06-09 00:50:59,430 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:50:59,436 [main] INFO t3.t3App - File Found : true
2018-06-09 00:56:49,333 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:56:49,337 [main] INFO t3.t3App - File Found : true
2018-06-09 00:57:34,710 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:57:34,714 [main] INFO t3.t3App - File Found : true
2018-06-09 00:57:34,732 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:57:34,733 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:57:34,733 [main] INFO t3.t3App - File Found : true
2018-06-09 00:57:34,736 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-09 00:57:38,112 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:57:38,112 [main] INFO t3.t3App - File Found : true
2018-06-09 00:57:38,115 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:57:38,116 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:57:38,116 [main] INFO t3.t3App - File Found : true
2018-06-09 00:57:38,118 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-09 00:57:38,727 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:57:38,727 [main] INFO t3.t3App - File Found : true
2018-06-09 00:57:38,730 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:57:38,731 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:57:38,731 [main] INFO t3.t3App - File Found : true
2018-06-09 00:57:38,732 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-09 00:58:12,616 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 00:58:12,617 [main] INFO t3.t3App - File Found : true
2018-06-09 00:58:12,620 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class EmployeesDao
{


  private Employees getFromResultSet (ResultSet r)
  throws SQLException
  {
    Employees employees = new Employees();

    employees.setEmail( r.getString("Email") );

    employees.setAddress( r.getString("Address") );

    employees.setFirstname( r.getString("FirstName") );

    employees.setTitle( r.getString("Title") );

    employees.setPostalcode( r.getString("PostalCode") );

    employees.setCity( r.getString("City") );

    employees.setState( r.getString("State") );

    employees.setPhone( r.getString("Phone") );

    employees.setReportsto( r.getInteger("ReportsTo") );

    employees.setHiredate( r.getString("HireDate") );

    employees.setCountry( r.getString("Country") );

    employees.setLastname( r.getString("LastName") );

    employees.setEmployeeid( r.getInteger("EmployeeId") );

    employees.setFax( r.getString("Fax") );

    employees.setBirthdate( r.getString("BirthDate") );

    return employees;
  }


  public Employees selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM employees WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Employees into the employees database table.
   */
  public void insertEmployees(Employees employees, Connection connection)
  {
    try
    {

      String query = "INSERT INTO employees "
       + "(Email,Address,FirstName,Title,PostalCode,City,State,Phone,ReportsTo,HireDate,Country,LastName,EmployeeId,Fax,BirthDate)"
        + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setString(0, employees.getEmail();
      
      preparedStatement.setString(1, employees.getAddress();
      
      preparedStatement.setString(2, employees.getFirstname();
      
      preparedStatement.setString(3, employees.getTitle();
      
      preparedStatement.setString(4, employees.getPostalcode();
      
      preparedStatement.setString(5, employees.getCity();
      
      preparedStatement.setString(6, employees.getState();
      
      preparedStatement.setString(7, employees.getPhone();
      
      preparedStatement.setInteger(8, employees.getReportsto();
      
      preparedStatement.setString(9, employees.getHiredate();
      
      preparedStatement.setString(10, employees.getCountry();
      
      preparedStatement.setString(11, employees.getLastname();
      
      preparedStatement.setInteger(12, employees.getEmployeeid();
      
      preparedStatement.setString(13, employees.getFax();
      
      preparedStatement.setString(14, employees.getBirthdate();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the employees table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM employees where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Employees object into the employees table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateEmployees(Employees employees, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE employees SET "
                   + "Email = ?, Address = ?, FirstName = ?, Title = ?, PostalCode = ?, City = ?, State = ?, Phone = ?, ReportsTo = ?, HireDate = ?, Country = ?, LastName = ?, EmployeeId = ?, Fax = ?, BirthDate = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setString(0, employees.getEmail();
      
      preparedStatement.setString(1, employees.getAddress();
      
      preparedStatement.setString(2, employees.getFirstname();
      
      preparedStatement.setString(3, employees.getTitle();
      
      preparedStatement.setString(4, employees.getPostalcode();
      
      preparedStatement.setString(5, employees.getCity();
      
      preparedStatement.setString(6, employees.getState();
      
      preparedStatement.setString(7, employees.getPhone();
      
      preparedStatement.setInteger(8, employees.getReportsto();
      
      preparedStatement.setString(9, employees.getHiredate();
      
      preparedStatement.setString(10, employees.getCountry();
      
      preparedStatement.setString(11, employees.getLastname();
      
      preparedStatement.setInteger(12, employees.getEmployeeid();
      
      preparedStatement.setString(13, employees.getFax();
      
      preparedStatement.setString(14, employees.getBirthdate();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(15, employees.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 00:58:12,621 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 00:58:12,621 [main] INFO t3.t3App - File Found : true
2018-06-09 00:58:12,624 [main] INFO t3.t3App - package domain;

public class Employees
{

  private String email;

  private String address;

  private String firstname;

  private String title;

  private String postalcode;

  private String city;

  private String state;

  private String phone;

  private Integer reportsto;

  private String hiredate;

  private String country;

  private String lastname;

  private Integer employeeid;

  private String fax;

  private String birthdate;


<<* --- getters --- *>>

  public String getEmail();
  {
    return email;
  }

  public String getAddress();
  {
    return address;
  }

  public String getFirstname();
  {
    return firstname;
  }

  public String getTitle();
  {
    return title;
  }

  public String getPostalcode();
  {
    return postalcode;
  }

  public String getCity();
  {
    return city;
  }

  public String getState();
  {
    return state;
  }

  public String getPhone();
  {
    return phone;
  }

  public Integer getReportsto();
  {
    return reportsto;
  }

  public String getHiredate();
  {
    return hiredate;
  }

  public String getCountry();
  {
    return country;
  }

  public String getLastname();
  {
    return lastname;
  }

  public Integer getEmployeeid();
  {
    return employeeid;
  }

  public String getFax();
  {
    return fax;
  }

  public String getBirthdate();
  {
    return birthdate;
  }


<<* --- setters --- *>>

  public void setEmail(String email);
  {
    this.email = email;
  }

  public void setAddress(String address);
  {
    this.address = address;
  }

  public void setFirstname(String firstname);
  {
    this.firstname = firstname;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

  public void setPostalcode(String postalcode);
  {
    this.postalcode = postalcode;
  }

  public void setCity(String city);
  {
    this.city = city;
  }

  public void setState(String state);
  {
    this.state = state;
  }

  public void setPhone(String phone);
  {
    this.phone = phone;
  }

  public void setReportsto(Integer reportsto);
  {
    this.reportsto = reportsto;
  }

  public void setHiredate(String hiredate);
  {
    this.hiredate = hiredate;
  }

  public void setCountry(String country);
  {
    this.country = country;
  }

  public void setLastname(String lastname);
  {
    this.lastname = lastname;
  }

  public void setEmployeeid(Integer employeeid);
  {
    this.employeeid = employeeid;
  }

  public void setFax(String fax);
  {
    this.fax = fax;
  }

  public void setBirthdate(String birthdate);
  {
    this.birthdate = birthdate;
  }

}
2018-06-09 01:01:53,876 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 01:01:53,879 [main] INFO t3.t3App - File Found : true
2018-06-09 01:01:53,899 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class EmployeesDao
{


  private Employees getFromResultSet (ResultSet r)
  throws SQLException
  {
    Employees employees = new Employees();

    employees.setEmail( r.getString("Email") );

    employees.setAddress( r.getString("Address") );

    employees.setFirstname( r.getString("FirstName") );

    employees.setTitle( r.getString("Title") );

    employees.setPostalcode( r.getString("PostalCode") );

    employees.setCity( r.getString("City") );

    employees.setState( r.getString("State") );

    employees.setPhone( r.getString("Phone") );

    employees.setReportsto( r.getInteger("ReportsTo") );

    employees.setHiredate( r.getString("HireDate") );

    employees.setCountry( r.getString("Country") );

    employees.setLastname( r.getString("LastName") );

    employees.setEmployeeid( r.getInteger("EmployeeId") );

    employees.setFax( r.getString("Fax") );

    employees.setBirthdate( r.getString("BirthDate") );

    return employees;
  }


  public Employees selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM employees WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Employees into the employees database table.
   */
  public void insertEmployees(Employees employees, Connection connection)
  {
    try
    {

      String query = "INSERT INTO employees "
       + "(Email,Address,FirstName,Title,PostalCode,City,State,Phone,ReportsTo,HireDate,Country,LastName,EmployeeId,Fax,BirthDate)"
        + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setString(0, employees.getEmail();
      
      preparedStatement.setString(1, employees.getAddress();
      
      preparedStatement.setString(2, employees.getFirstname();
      
      preparedStatement.setString(3, employees.getTitle();
      
      preparedStatement.setString(4, employees.getPostalcode();
      
      preparedStatement.setString(5, employees.getCity();
      
      preparedStatement.setString(6, employees.getState();
      
      preparedStatement.setString(7, employees.getPhone();
      
      preparedStatement.setInteger(8, employees.getReportsto();
      
      preparedStatement.setString(9, employees.getHiredate();
      
      preparedStatement.setString(10, employees.getCountry();
      
      preparedStatement.setString(11, employees.getLastname();
      
      preparedStatement.setInteger(12, employees.getEmployeeid();
      
      preparedStatement.setString(13, employees.getFax();
      
      preparedStatement.setString(14, employees.getBirthdate();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the employees table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM employees where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Employees object into the employees table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateEmployees(Employees employees, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE employees SET "
                   + "Email = ?, Address = ?, FirstName = ?, Title = ?, PostalCode = ?, City = ?, State = ?, Phone = ?, ReportsTo = ?, HireDate = ?, Country = ?, LastName = ?, EmployeeId = ?, Fax = ?, BirthDate = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setString(0, employees.getEmail();
      
      preparedStatement.setString(1, employees.getAddress();
      
      preparedStatement.setString(2, employees.getFirstname();
      
      preparedStatement.setString(3, employees.getTitle();
      
      preparedStatement.setString(4, employees.getPostalcode();
      
      preparedStatement.setString(5, employees.getCity();
      
      preparedStatement.setString(6, employees.getState();
      
      preparedStatement.setString(7, employees.getPhone();
      
      preparedStatement.setInteger(8, employees.getReportsto();
      
      preparedStatement.setString(9, employees.getHiredate();
      
      preparedStatement.setString(10, employees.getCountry();
      
      preparedStatement.setString(11, employees.getLastname();
      
      preparedStatement.setInteger(12, employees.getEmployeeid();
      
      preparedStatement.setString(13, employees.getFax();
      
      preparedStatement.setString(14, employees.getBirthdate();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(15, employees.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 01:01:53,901 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 01:01:53,901 [main] INFO t3.t3App - File Found : true
2018-06-09 01:01:53,907 [main] INFO t3.t3App - package domain;

public class Employees
{

  private String email;

  private String address;

  private String firstname;

  private String title;

  private String postalcode;

  private String city;

  private String state;

  private String phone;

  private Integer reportsto;

  private String hiredate;

  private String country;

  private String lastname;

  private Integer employeeid;

  private String fax;

  private String birthdate;


<<* --- getters --- *>>

  public String getEmail();
  {
    return email;
  }

  public String getAddress();
  {
    return address;
  }

  public String getFirstname();
  {
    return firstname;
  }

  public String getTitle();
  {
    return title;
  }

  public String getPostalcode();
  {
    return postalcode;
  }

  public String getCity();
  {
    return city;
  }

  public String getState();
  {
    return state;
  }

  public String getPhone();
  {
    return phone;
  }

  public Integer getReportsto();
  {
    return reportsto;
  }

  public String getHiredate();
  {
    return hiredate;
  }

  public String getCountry();
  {
    return country;
  }

  public String getLastname();
  {
    return lastname;
  }

  public Integer getEmployeeid();
  {
    return employeeid;
  }

  public String getFax();
  {
    return fax;
  }

  public String getBirthdate();
  {
    return birthdate;
  }


<<* --- setters --- *>>

  public void setEmail(String email);
  {
    this.email = email;
  }

  public void setAddress(String address);
  {
    this.address = address;
  }

  public void setFirstname(String firstname);
  {
    this.firstname = firstname;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

  public void setPostalcode(String postalcode);
  {
    this.postalcode = postalcode;
  }

  public void setCity(String city);
  {
    this.city = city;
  }

  public void setState(String state);
  {
    this.state = state;
  }

  public void setPhone(String phone);
  {
    this.phone = phone;
  }

  public void setReportsto(Integer reportsto);
  {
    this.reportsto = reportsto;
  }

  public void setHiredate(String hiredate);
  {
    this.hiredate = hiredate;
  }

  public void setCountry(String country);
  {
    this.country = country;
  }

  public void setLastname(String lastname);
  {
    this.lastname = lastname;
  }

  public void setEmployeeid(Integer employeeid);
  {
    this.employeeid = employeeid;
  }

  public void setFax(String fax);
  {
    this.fax = fax;
  }

  public void setBirthdate(String birthdate);
  {
    this.birthdate = birthdate;
  }

}
2018-06-09 01:03:12,719 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 01:03:12,720 [main] INFO t3.t3App - File Found : true
2018-06-09 01:07:00,501 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 01:07:00,504 [main] INFO t3.t3App - File Found : true
2018-06-09 01:07:00,522 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class InvoiceItemsDao
{


  private InvoiceItems getFromResultSet (ResultSet r)
  throws SQLException
  {
    InvoiceItems invoiceItems = new InvoiceItems();

    invoiceItems.setUnitprice( r.getFloat("UnitPrice") );

    invoiceItems.setInvoicelineid( r.getInteger("InvoiceLineId") );

    invoiceItems.setQuantity( r.getInteger("Quantity") );

    invoiceItems.setInvoiceid( r.getInteger("InvoiceId") );

    invoiceItems.setTrackid( r.getInteger("TrackId") );

    return invoiceItems;
  }


  public InvoiceItems selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM invoice_items WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new InvoiceItems into the invoice_items database table.
   */
  public void insertInvoiceItems(InvoiceItems invoiceItems, Connection connection)
  {
    try
    {

      String query = "INSERT INTO invoice_items "
       + "(UnitPrice,InvoiceLineId,Quantity,InvoiceId,TrackId)"
        + "VALUES (?, ?, ?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setFloat(0, invoiceItems.getUnitprice();
      
      preparedStatement.setInteger(1, invoiceItems.getInvoicelineid();
      
      preparedStatement.setInteger(2, invoiceItems.getQuantity();
      
      preparedStatement.setInteger(3, invoiceItems.getInvoiceid();
      
      preparedStatement.setInteger(4, invoiceItems.getTrackid();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the invoice_items table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM invoice_items where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given InvoiceItems object into the invoice_items table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateInvoiceItems(InvoiceItems invoiceItems, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE invoice_items SET "
                   + "UnitPrice = ?, InvoiceLineId = ?, Quantity = ?, InvoiceId = ?, TrackId = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setFloat(0, invoiceItems.getUnitprice();
      
      preparedStatement.setInteger(1, invoiceItems.getInvoicelineid();
      
      preparedStatement.setInteger(2, invoiceItems.getQuantity();
      
      preparedStatement.setInteger(3, invoiceItems.getInvoiceid();
      
      preparedStatement.setInteger(4, invoiceItems.getTrackid();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(5, invoiceItems.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 01:07:00,524 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 01:07:00,524 [main] INFO t3.t3App - File Found : true
2018-06-09 01:07:00,527 [main] INFO t3.t3App - package domain;

public class InvoiceItems
{

  private Float unitprice;

  private Integer invoicelineid;

  private Integer quantity;

  private Integer invoiceid;

  private Integer trackid;


<<* --- getters --- *>>

  public Float getUnitprice();
  {
    return unitprice;
  }

  public Integer getInvoicelineid();
  {
    return invoicelineid;
  }

  public Integer getQuantity();
  {
    return quantity;
  }

  public Integer getInvoiceid();
  {
    return invoiceid;
  }

  public Integer getTrackid();
  {
    return trackid;
  }


<<* --- setters --- *>>

  public void setUnitprice(Float unitprice);
  {
    this.unitprice = unitprice;
  }

  public void setInvoicelineid(Integer invoicelineid);
  {
    this.invoicelineid = invoicelineid;
  }

  public void setQuantity(Integer quantity);
  {
    this.quantity = quantity;
  }

  public void setInvoiceid(Integer invoiceid);
  {
    this.invoiceid = invoiceid;
  }

  public void setTrackid(Integer trackid);
  {
    this.trackid = trackid;
  }

}
2018-06-09 01:10:34,371 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 01:10:34,374 [main] INFO t3.t3App - File Found : true
2018-06-09 01:10:34,392 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 01:10:34,394 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 01:10:34,394 [main] INFO t3.t3App - File Found : true
2018-06-09 01:10:34,396 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-09 01:13:41,295 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 01:13:41,295 [main] INFO t3.t3App - File Found : true
2018-06-09 01:13:41,298 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 01:13:41,298 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 01:13:41,299 [main] INFO t3.t3App - File Found : true
2018-06-09 01:13:41,300 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-09 01:14:28,861 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 01:14:28,865 [main] INFO t3.t3App - File Found : true
2018-06-09 01:14:28,882 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;




public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE <<"#nombre_clave_tabla#">> = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where <<"#nombre_clave_tabla#">> = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE <<"#nombre_clave_tabla#">> =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get<<"#Nombre_clave#">>());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 01:14:28,883 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 01:14:28,883 [main] INFO t3.t3App - File Found : true
2018-06-09 01:14:28,886 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-09 01:18:21,999 [main] INFO t3.t3App - buscando template/java/dao.tpl
2018-06-09 01:18:22,019 [main] INFO t3.t3App - File Found : true
2018-06-09 01:18:22,123 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE xxxxxxxxxxxxxxx = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where xxxxxxxxxxxxxxx = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE xxxxxxxxxxxxxxx =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.getXxxxxxxxxxxxxxx());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-09 01:18:22,129 [main] INFO t3.t3App - buscando template/java/persistencia.tpl
2018-06-09 01:18:22,130 [main] INFO t3.t3App - File Found : true
2018-06-09 01:18:22,145 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-09 01:23:02,083 [main] INFO t3.t3App - buscando template/php/dao.tpl
2018-06-09 01:23:02,102 [main] INFO t3.t3App - File Found : true
2018-06-09 01:23:02,259 [main] INFO t3.t3App - class EmployeesModel
{
    private $pdo;

    public function __CONSTRUCT()
    {
        try
        {
            $this->pdo = new PDO('jdbc:sqlite:D:workspacet3datatest.db', '', '');
            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        }
        catch(Exception $e)
        {
            die($e->getMessage());
        }
    }

    public function Listar()
    {
        try
        {
            $result = array();

            $stm = $this->pdo->prepare("SELECT * FROM employees");
            $stm->execute();

            foreach($stm->fetchAll(PDO::FETCH_OBJ) as $r)
            {

                $employees = new Employees();

                
                   $employees->__SET('email', $r->email);
               
                   $employees->__SET('address', $r->address);
               
                   $employees->__SET('firstname', $r->firstname);
               
                   $employees->__SET('title', $r->title);
               
                   $employees->__SET('postalcode', $r->postalcode);
               
                   $employees->__SET('city', $r->city);
               
                   $employees->__SET('state', $r->state);
               
                   $employees->__SET('phone', $r->phone);
               
                   $employees->__SET('reportsto', $r->reportsto);
               
                   $employees->__SET('hiredate', $r->hiredate);
               
                   $employees->__SET('country', $r->country);
               
                   $employees->__SET('lastname', $r->lastname);
               
                   $employees->__SET('employeeid', $r->employeeid);
               
                   $employees->__SET('fax', $r->fax);
               
                   $employees->__SET('birthdate', $r->birthdate);
               
                $result[] = $employees;
            }

            return $result;
        }
        catch(Exception $e)
        {
            die($e->getMessage());
        }
    }

    public function Obtener($id)
    {
        try
        {
            $stm = $this->pdo
                      ->prepare("SELECT * FROM employees WHERE employeId = ?");


            $stm->execute(array($id));
            $r = $stm->fetch(PDO::FETCH_OBJ);

           $employees = new Employees();

              
                   $employees->__SET('email', $r->email);
               
                   $employees->__SET('address', $r->address);
               
                   $employees->__SET('firstname', $r->firstname);
               
                   $employees->__SET('title', $r->title);
               
                   $employees->__SET('postalcode', $r->postalcode);
               
                   $employees->__SET('city', $r->city);
               
                   $employees->__SET('state', $r->state);
               
                   $employees->__SET('phone', $r->phone);
               
                   $employees->__SET('reportsto', $r->reportsto);
               
                   $employees->__SET('hiredate', $r->hiredate);
               
                   $employees->__SET('country', $r->country);
               
                   $employees->__SET('lastname', $r->lastname);
               
                   $employees->__SET('employeeid', $r->employeeid);
               
                   $employees->__SET('fax', $r->fax);
               
                   $employees->__SET('birthdate', $r->birthdate);
               

            return $employees;
        } catch (Exception $e)
        {
            die($e->getMessage());
        }
    }

    public function Eliminar($id)
    {
        try
        {
            $stm = $this->pdo
                      ->prepare("DELETE FROM employees WHERE employeId = ?");

            $stm->execute(array($id));
        } catch (Exception $e)
        {
            die($e->getMessage());
        }
    }

    public function Actualizar(Alumno $data)
    {
        try
        {
            $sql = "UPDATE alumnos SET
                       Email = ?, Address = ?, FirstName = ?, Title = ?, PostalCode = ?, City = ?, State = ?, Phone = ?, ReportsTo = ?, HireDate = ?, Country = ?, LastName = ?, EmployeeId = ?, Fax = ?, BirthDate = ?
                    WHERE employeId = ?";

            $array_param = [];
            
              array_push( $array_param,  $data->__GET('email');
            
              array_push( $array_param,  $data->__GET('address');
            
              array_push( $array_param,  $data->__GET('firstname');
            
              array_push( $array_param,  $data->__GET('title');
            
              array_push( $array_param,  $data->__GET('postalcode');
            
              array_push( $array_param,  $data->__GET('city');
            
              array_push( $array_param,  $data->__GET('state');
            
              array_push( $array_param,  $data->__GET('phone');
            
              array_push( $array_param,  $data->__GET('reportsto');
            
              array_push( $array_param,  $data->__GET('hiredate');
            
              array_push( $array_param,  $data->__GET('country');
            
              array_push( $array_param,  $data->__GET('lastname');
            
              array_push( $array_param,  $data->__GET('employeeid');
            
              array_push( $array_param,  $data->__GET('fax');
            
              array_push( $array_param,  $data->__GET('birthdate');
            
             array_push( $array_param,  $data->__GET('employeid');
            $this->pdo->prepare($sql)->execute($array_param);
        } catch (Exception $e)
        {
            die($e->getMessage());
        }
    }

    public function Registrar(Alumno $data)
    {
        try
        {
        $sql = "INSERT INTO employees "
       + "(Email,Address,FirstName,Title,PostalCode,City,State,Phone,ReportsTo,HireDate,Country,LastName,EmployeeId,Fax,BirthDate)"
        + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            $array_param = [];
            
              array_push( $array_param,  $data->__GET('email');
            
              array_push( $array_param,  $data->__GET('address');
            
              array_push( $array_param,  $data->__GET('firstname');
            
              array_push( $array_param,  $data->__GET('title');
            
              array_push( $array_param,  $data->__GET('postalcode');
            
              array_push( $array_param,  $data->__GET('city');
            
              array_push( $array_param,  $data->__GET('state');
            
              array_push( $array_param,  $data->__GET('phone');
            
              array_push( $array_param,  $data->__GET('reportsto');
            
              array_push( $array_param,  $data->__GET('hiredate');
            
              array_push( $array_param,  $data->__GET('country');
            
              array_push( $array_param,  $data->__GET('lastname');
            
              array_push( $array_param,  $data->__GET('employeeid');
            
              array_push( $array_param,  $data->__GET('fax');
            
              array_push( $array_param,  $data->__GET('birthdate');
            
             $this->pdo->prepare($sql)->execute($array_param);
        } catch (Exception $e)
        {
            die($e->getMessage());
        }
    }
}
2018-06-09 01:23:02,273 [main] INFO t3.t3App - buscando template/php/persistencia.tpl
2018-06-09 01:23:02,274 [main] INFO t3.t3App - File Found : true
2018-06-09 01:23:02,286 [main] INFO t3.t3App - class Employees
{
    
    private email;
    
    private address;
    
    private firstname;
    
    private title;
    
    private postalcode;
    
    private city;
    
    private state;
    
    private phone;
    
    private reportsto;
    
    private hiredate;
    
    private country;
    
    private lastname;
    
    private employeeid;
    
    private fax;
    
    private birthdate;
    

    public function __GET($k){ return $this->$k; }
    public function __SET($k, $v){ return $this->$k = $v; }
}
2018-06-09 01:23:02,288 [main] INFO t3.t3App - buscando template/php/vista.tpl
2018-06-09 01:23:02,289 [main] INFO t3.t3App - File Found : true
2018-06-09 01:23:02,328 [main] INFO t3.t3App - <?php
require_once 'Employees.entidad.php';
require_once 'Employees.model.php';

$employees = new Employees();
$model = new EmployeesModel();

if(isset($_REQUEST['action']))
{
    switch($_REQUEST['action'])
    {
        case 'actualizar':

                
                   $employees->__SET('email', $r->email);
               
                   $employees->__SET('address', $r->address);
               
                   $employees->__SET('firstname', $r->firstname);
               
                   $employees->__SET('title', $r->title);
               
                   $employees->__SET('postalcode', $r->postalcode);
               
                   $employees->__SET('city', $r->city);
               
                   $employees->__SET('state', $r->state);
               
                   $employees->__SET('phone', $r->phone);
               
                   $employees->__SET('reportsto', $r->reportsto);
               
                   $employees->__SET('hiredate', $r->hiredate);
               
                   $employees->__SET('country', $r->country);
               
                   $employees->__SET('lastname', $r->lastname);
               
                   $employees->__SET('employeeid', $r->employeeid);
               
                   $employees->__SET('fax', $r->fax);
               
                   $employees->__SET('birthdate', $r->birthdate);
               

            $model->Actualizar($employees);
            header('Location: index.php');
            break;

        case 'registrar':
              
                   $employees->__SET('email', $r->email);
               
                   $employees->__SET('address', $r->address);
               
                   $employees->__SET('firstname', $r->firstname);
               
                   $employees->__SET('title', $r->title);
               
                   $employees->__SET('postalcode', $r->postalcode);
               
                   $employees->__SET('city', $r->city);
               
                   $employees->__SET('state', $r->state);
               
                   $employees->__SET('phone', $r->phone);
               
                   $employees->__SET('reportsto', $r->reportsto);
               
                   $employees->__SET('hiredate', $r->hiredate);
               
                   $employees->__SET('country', $r->country);
               
                   $employees->__SET('lastname', $r->lastname);
               
                   $employees->__SET('employeeid', $r->employeeid);
               
                   $employees->__SET('fax', $r->fax);
               
                   $employees->__SET('birthdate', $r->birthdate);
               

            $model->Registrar($employees);
            header('Location: index.php');
            break;

        case 'eliminar':
            $model->Eliminar($_REQUEST['id']);
            header('Location: index.php');
            break;

        case 'editar':
            $employees = $model->Obtener($_REQUEST['id']);
            break;
    }
}

?>

<!DOCTYPE html>
<html lang="es">
    <head>
        <title>Anexsoft</title>
        <link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.5.0/pure-min.css">
    </head>
    <body style="padding:15px;">

        <div class="pure-g">
            <div class="pure-u-1-12">

                <form action="?action=<?php echo $employees->id > 0 ? 'actualizar' : 'registrar'; ?>" method="post" class="pure-form pure-form-stacked" style="margin-bottom:30px;">
                    <input type="hidden" name="id" value="<?php echo $employees->__GET('id'); ?>" />

                    <table style="width:500px;">
                      
                           <tr>
                            <th style="text-align:left;">email</th>
                            <td><input type="text" name="email" value="<?php echo $employees->__GET('email'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">address</th>
                            <td><input type="text" name="address" value="<?php echo $employees->__GET('address'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">firstname</th>
                            <td><input type="text" name="firstname" value="<?php echo $employees->__GET('firstname'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">title</th>
                            <td><input type="text" name="title" value="<?php echo $employees->__GET('title'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">postalcode</th>
                            <td><input type="text" name="postalcode" value="<?php echo $employees->__GET('postalcode'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">city</th>
                            <td><input type="text" name="city" value="<?php echo $employees->__GET('city'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">state</th>
                            <td><input type="text" name="state" value="<?php echo $employees->__GET('state'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">phone</th>
                            <td><input type="text" name="phone" value="<?php echo $employees->__GET('phone'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">reportsto</th>
                            <td><input type="text" name="reportsto" value="<?php echo $employees->__GET('reportsto'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">hiredate</th>
                            <td><input type="text" name="hiredate" value="<?php echo $employees->__GET('hiredate'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">country</th>
                            <td><input type="text" name="country" value="<?php echo $employees->__GET('country'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">lastname</th>
                            <td><input type="text" name="lastname" value="<?php echo $employees->__GET('lastname'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">employeeid</th>
                            <td><input type="text" name="employeeid" value="<?php echo $employees->__GET('employeeid'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">fax</th>
                            <td><input type="text" name="fax" value="<?php echo $employees->__GET('fax'); ?>" style="width:100%;" /></td>
                        </tr>
                       
                           <tr>
                            <th style="text-align:left;">birthdate</th>
                            <td><input type="text" name="birthdate" value="<?php echo $employees->__GET('birthdate'); ?>" style="width:100%;" /></td>
                        </tr>
                       

                    </table>
                </form>

                <table class="pure-table pure-table-horizontal">
                    <thead>
                        <tr>
                         
                            <th style="text-align:left;">email</th>
                        
                            <th style="text-align:left;">address</th>
                        
                            <th style="text-align:left;">firstname</th>
                        
                            <th style="text-align:left;">title</th>
                        
                            <th style="text-align:left;">postalcode</th>
                        
                            <th style="text-align:left;">city</th>
                        
                            <th style="text-align:left;">state</th>
                        
                            <th style="text-align:left;">phone</th>
                        
                            <th style="text-align:left;">reportsto</th>
                        
                            <th style="text-align:left;">hiredate</th>
                        
                            <th style="text-align:left;">country</th>
                        
                            <th style="text-align:left;">lastname</th>
                        
                            <th style="text-align:left;">employeeid</th>
                        
                            <th style="text-align:left;">fax</th>
                        
                            <th style="text-align:left;">birthdate</th>
                        
                            <th></th>
                            <th></th>

                        </tr>
                    </thead>
                    <?php foreach($model->Listar() as $r): ?>
                        <tr>
                        
                            <td><?php echo $r->__GET('email'); ?></td>

                             
                            <td><?php echo $r->__GET('address'); ?></td>

                             
                            <td><?php echo $r->__GET('firstname'); ?></td>

                             
                            <td><?php echo $r->__GET('title'); ?></td>

                             
                            <td><?php echo $r->__GET('postalcode'); ?></td>

                             
                            <td><?php echo $r->__GET('city'); ?></td>

                             
                            <td><?php echo $r->__GET('state'); ?></td>

                             
                            <td><?php echo $r->__GET('phone'); ?></td>

                             
                            <td><?php echo $r->__GET('reportsto'); ?></td>

                             
                            <td><?php echo $r->__GET('hiredate'); ?></td>

                             
                            <td><?php echo $r->__GET('country'); ?></td>

                             
                            <td><?php echo $r->__GET('lastname'); ?></td>

                             
                            <td><?php echo $r->__GET('employeeid'); ?></td>

                             
                            <td><?php echo $r->__GET('fax'); ?></td>

                             
                            <td><?php echo $r->__GET('birthdate'); ?></td>

                             
                            <td>

                                <a href="?action=editar&id=<?php echo $r->employeid; ?>">Editar</a>
                            </td>
                            <td>
                                <a href="?action=eliminar&id=<?php echo $r->employeid; ?>">Eliminar</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                </table>

            </div>
        </div>

    </body>
</html>
