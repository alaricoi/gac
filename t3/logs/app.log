2018-06-10 00:35:41,335 [main] INFO t3.t3App - D:\workspace\t3
2018-06-10 00:39:44,295 [main] INFO t3.t3App - D:\workspace\t3
2018-06-10 00:39:44,299 [main] ERROR t3.t3App - java.io.FileNotFoundException: .\conf\template.properties (El sistema no puede encontrar la ruta especificada)
2018-06-10 00:39:59,365 [main] INFO t3.t3App - D:\workspace\t3
2018-06-10 00:39:59,369 [main] ERROR t3.t3App - java.io.FileNotFoundException: \conf\template.properties (El sistema no puede encontrar la ruta especificada)
2018-06-10 00:40:11,027 [main] INFO t3.t3App - D:\workspace\t3
2018-06-10 00:40:11,030 [main] ERROR t3.t3App - java.io.FileNotFoundException: conf\template.properties (El sistema no puede encontrar la ruta especificada)
2018-06-10 00:40:27,636 [main] INFO t3.t3App - D:\workspace\t3
2018-06-10 00:42:33,037 [main] INFO t3.t3App - D:\workspace\t3
2018-06-10 00:46:41,042 [main] INFO t3.t3App - D:\workspace\t3
2018-06-10 00:46:56,096 [main] INFO t3.t3App - buscando ./templates/java/dao.tpl
2018-06-10 00:46:56,096 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:56,108 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;



public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE  = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where  = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE  =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-10 00:46:56,109 [main] INFO t3.t3App - buscando ./templates/java/persistencia.tpl
2018-06-10 00:46:56,109 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:56,111 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-10 00:46:57,926 [main] INFO t3.t3App - buscando ./templates/java/dao.tpl
2018-06-10 00:46:57,926 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:57,929 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;



public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE  = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where  = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE  =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-10 00:46:57,929 [main] INFO t3.t3App - buscando ./templates/java/persistencia.tpl
2018-06-10 00:46:57,929 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:57,931 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-10 00:46:58,565 [main] INFO t3.t3App - buscando ./templates/java/dao.tpl
2018-06-10 00:46:58,565 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:58,568 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;



public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE  = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where  = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE  =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-10 00:46:58,569 [main] INFO t3.t3App - buscando ./templates/java/persistencia.tpl
2018-06-10 00:46:58,569 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:58,570 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-10 00:46:58,821 [main] INFO t3.t3App - buscando ./templates/java/dao.tpl
2018-06-10 00:46:58,821 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:58,823 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;



public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE  = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where  = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE  =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-10 00:46:58,823 [main] INFO t3.t3App - buscando ./templates/java/persistencia.tpl
2018-06-10 00:46:58,824 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:58,824 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-10 00:46:59,734 [main] INFO t3.t3App - buscando ./templates/java/dao.tpl
2018-06-10 00:46:59,734 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:59,735 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;



public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE  = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where  = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE  =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-10 00:46:59,736 [main] INFO t3.t3App - buscando ./templates/java/persistencia.tpl
2018-06-10 00:46:59,736 [main] INFO t3.t3App - File Found : true
2018-06-10 00:46:59,737 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-10 00:47:00,477 [main] INFO t3.t3App - buscando ./templates/java/dao.tpl
2018-06-10 00:47:00,477 [main] INFO t3.t3App - File Found : true
2018-06-10 00:47:00,478 [main] INFO t3.t3App - package dao;

import java.sql.*;
import java.util.*;
import domain.*;



public class AlbumsDao
{


  private Albums getFromResultSet (ResultSet r)
  throws SQLException
  {
    Albums albums = new Albums();

    albums.setArtistid( r.getInteger("ArtistId") );

    albums.setAlbumid( r.getInteger("AlbumId") );

    albums.setTitle( r.getString("Title") );

    return albums;
  }


  public Albums selectByKey (Connection conn, int id)
  throws SQLException
  {
    Commands currentRow = null;
    Statement statement = null;
    ResultSet resultSet = null;
    try
    {

      String query = " SELECT * FROM albums WHERE  = " + id;
      statement = conn.createStatement();
      resultSet = statement.executeQuery(query);
      if ( resultSet.next() )
      {
        currentRow = getFromResultSet(resultSet);
      }
    }
    catch (SQLException se)
    {
      // log exception if desired
      throw se;
    }
    finally
    {
      if ( statement != null )
      {
        statement.close();
      }
    }
  }

  /**
   * Insert a new Albums into the albums database table.
   */
  public void insertAlbums(Albums albums, Connection connection)
  {
    try
    {

      String query = "INSERT INTO albums "
       + "(ArtistId,AlbumId,Title)"
        + "VALUES (?, ?, ?)";

      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      

      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {

    }
  }

  /**
   * Perform a SQL DELETE on the given id for the albums table.
   */
  public boolean deleteByKey (Connection connection, int id)
  throws SQLException
  {
    try
    {
      String query = "DELETE FROM albums where  = ?";
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      preparedStatement.setInt(1, id);
      preparedStatement.execute();
      connection.close();
    }
    catch (SQLException se)
    {

      throw se;
    }
    finally
    {
      if ( preparedStatement != null )
      {
        preparedStatement.close();
      }
    }
  }


  /**
   * Update the given Albums object into the albums table.
   * Assumes the key for the object is the 'id' field.
   */
  public void updateAlbums(Albums albums, Connection connection)
  {
    try
    {
      // TODO/ERROR - need to fix this query, as it will have an extra comma at the end
      String query = "UPDATE albums SET "
                   + "ArtistId = ?, AlbumId = ?, Title = ?"
                   + " WHERE  =?";

      // smarty template note: index_next lets the index start at 1 instead of 0
      // do all the 'set' statements for the fields
      PreparedStatement preparedStatement = connection.prepareStatement(query);
      
      preparedStatement.setInteger(0, albums.getArtistid();
      
      preparedStatement.setInteger(1, albums.getAlbumid();
      
      preparedStatement.setString(2, albums.getTitle();
      
      // set the key

<<* using the smarty math function to get the right number here *>>
      preparedStatement.setInt(3, albums.get());

      // execute the preparedstatement
      preparedStatement.execute();
      connection.close();
    }
    catch (Exception e)
    {
      // TODO log the exception however you normally do
    }
  }
}
2018-06-10 00:47:00,479 [main] INFO t3.t3App - buscando ./templates/java/persistencia.tpl
2018-06-10 00:47:00,479 [main] INFO t3.t3App - File Found : true
2018-06-10 00:47:00,480 [main] INFO t3.t3App - package domain;

public class Albums
{

  private Integer artistid;

  private Integer albumid;

  private String title;


<<* --- getters --- *>>

  public Integer getArtistid();
  {
    return artistid;
  }

  public Integer getAlbumid();
  {
    return albumid;
  }

  public String getTitle();
  {
    return title;
  }


<<* --- setters --- *>>

  public void setArtistid(Integer artistid);
  {
    this.artistid = artistid;
  }

  public void setAlbumid(Integer albumid);
  {
    this.albumid = albumid;
  }

  public void setTitle(String title);
  {
    this.title = title;
  }

}
2018-06-12 10:07:53,558 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 10:21:26,769 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 10:21:30,716 [main] ERROR t3.t3App - java.sql.SQLException: path to 'D:\workspace\t3\data\test.db': 'D:\workspace' does not exist
2018-06-12 10:26:37,383 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 10:28:37,172 [main] INFO t3.t3App - buscando ./templates/java/dao.tpl
2018-06-12 10:28:37,172 [main] INFO t3.t3App - File Found : true
2018-06-12 10:28:37,184 [main] INFO t3.t3App - buscando ./templates/java/persistencia.tpl
2018-06-12 10:28:37,185 [main] INFO t3.t3App - File Found : true
2018-06-12 10:30:00,060 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 10:30:36,443 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 10:31:03,305 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 10:31:03,305 [main] INFO t3.t3App - File Found : true
2018-06-12 10:31:03,316 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 10:31:03,317 [main] INFO t3.t3App - File Found : true
2018-06-12 10:31:03,318 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 10:31:03,318 [main] INFO t3.t3App - File Found : true
2018-06-12 10:32:34,024 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 10:33:06,551 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 10:33:06,551 [main] INFO t3.t3App - File Found : true
2018-06-12 10:33:26,485 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 10:33:26,486 [main] INFO t3.t3App - File Found : true
2018-06-12 10:33:37,565 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 10:33:37,565 [main] INFO t3.t3App - File Found : true
2018-06-12 10:33:55,331 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 10:34:33,938 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 10:34:33,938 [main] INFO t3.t3App - File Found : true
2018-06-12 10:34:33,949 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 10:34:33,949 [main] INFO t3.t3App - File Found : true
2018-06-12 10:34:33,950 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 10:34:33,951 [main] INFO t3.t3App - File Found : true
2018-06-12 13:42:26,044 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 13:43:25,176 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 13:43:25,177 [main] INFO t3.t3App - File Found : true
2018-06-12 13:43:25,189 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 13:43:25,189 [main] INFO t3.t3App - File Found : true
2018-06-12 13:43:25,190 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 13:43:25,190 [main] INFO t3.t3App - File Found : true
2018-06-12 13:43:58,196 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 13:43:58,196 [main] INFO t3.t3App - File Found : true
2018-06-12 13:43:58,199 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 13:43:58,199 [main] INFO t3.t3App - File Found : true
2018-06-12 13:43:58,200 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 13:43:58,200 [main] INFO t3.t3App - File Found : true
2018-06-12 13:49:21,975 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 13:50:05,067 [main] INFO t3.t3App - sqlite:D:\workspaceMio\gac\t3\data\test.db
2018-06-12 13:50:05,069 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 13:50:05,069 [main] INFO t3.t3App - File Found : true
2018-06-12 13:50:05,080 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 13:50:05,081 [main] INFO t3.t3App - File Found : true
2018-06-12 13:50:05,082 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 13:50:05,082 [main] INFO t3.t3App - File Found : true
2018-06-12 13:56:47,068 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 14:52:26,335 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 14:54:30,850 [main] ERROR t3.t3App - java.sql.SQLException: path to 'localhost:3306/sys': 'D:\workspaceMio\gac\t3\localhost:3306' does not exist
2018-06-12 14:54:42,053 [main] ERROR t3.t3App - java.sql.SQLException: path to 'http://localhost:3306/sys': 'D:\workspaceMio\gac\t3\http:' does not exist
2018-06-12 14:54:48,177 [main] ERROR t3.t3App - java.sql.SQLException: Must specify port after ':' in connection string
2018-06-12 14:57:36,665 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 14:57:36,665 [main] INFO t3.t3App - File Found : true
2018-06-12 14:57:44,415 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 14:57:44,415 [main] INFO t3.t3App - File Found : true
2018-06-12 14:57:44,421 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 14:57:44,421 [main] INFO t3.t3App - File Found : true
2018-06-12 14:57:44,423 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 14:57:44,424 [main] INFO t3.t3App - File Found : true
2018-06-12 14:59:00,060 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 14:59:00,060 [main] INFO t3.t3App - File Found : true
2018-06-12 14:59:00,060 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 14:59:00,060 [main] INFO t3.t3App - File Found : true
2018-06-12 14:59:00,060 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 14:59:00,060 [main] INFO t3.t3App - File Found : true
2018-06-12 15:14:19,736 [main] ERROR t3.t3App - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown database 'employess'
2018-06-12 15:14:49,787 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 15:14:49,787 [main] INFO t3.t3App - File Found : true
2018-06-12 15:14:49,789 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 15:14:49,789 [main] INFO t3.t3App - File Found : true
2018-06-12 15:14:49,790 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 15:14:49,790 [main] INFO t3.t3App - File Found : true
2018-06-12 15:25:00,585 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 15:25:44,396 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 15:25:44,396 [main] INFO t3.t3App - File Found : true
2018-06-12 15:25:44,398 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 15:25:44,398 [main] INFO t3.t3App - File Found : true
2018-06-12 15:25:44,398 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 15:25:44,398 [main] INFO t3.t3App - File Found : true
2018-06-12 15:26:48,711 [main] INFO t3.t3App - D:\workspaceMio\gac\t3
2018-06-12 15:27:08,089 [main] ERROR t3.t3App - java.sql.SQLException: Access denied for user ''@'localhost' (using password: NO)
2018-06-12 15:27:32,284 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 15:27:32,284 [main] INFO t3.t3App - File Found : true
2018-06-12 15:27:32,306 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 15:27:32,306 [main] INFO t3.t3App - File Found : true
2018-06-12 15:27:32,307 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 15:27:32,307 [main] INFO t3.t3App - File Found : true
2018-06-12 15:29:48,340 [main] INFO t3.t3App - buscando ./templates/php/dao.tpl
2018-06-12 15:29:48,340 [main] INFO t3.t3App - File Found : true
2018-06-12 15:29:48,340 [main] INFO t3.t3App - buscando ./templates/php/persistencia.tpl
2018-06-12 15:29:48,340 [main] INFO t3.t3App - File Found : true
2018-06-12 15:29:48,340 [main] INFO t3.t3App - buscando ./templates/php/vista.tpl
2018-06-12 15:29:48,340 [main] INFO t3.t3App - File Found : true
